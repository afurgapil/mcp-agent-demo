generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model customers {
  customer_id Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  email       String?   @unique(map: "customers_email_unique") @db.VarChar(150)
  phone       String?   @db.VarChar(20)
  address     String?   @db.Text
  created_at  DateTime? @default(now()) @db.Timestamp(0)
}

model device_permissions {
  permission_id Int      @id @default(autoincrement())
  user_id       Int
  device_id     Int
  can_view      Boolean? @default(true)
  can_control   Boolean? @default(false)
  users         users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "device_permissions_ibfk_1")
  devices       devices  @relation(fields: [device_id], references: [device_id], onDelete: Cascade, onUpdate: NoAction, map: "device_permissions_ibfk_2")

  @@index([device_id], map: "device_permissions_device_id_idx")
  @@index([user_id], map: "device_permissions_user_id_idx")
}

model devices {
  device_id          Int                  @id @default(autoincrement())
  name               String               @db.VarChar(100)
  type               devices_type
  location           String?              @db.VarChar(255)
  status             devices_status?      @default(active)
  created_at         DateTime?            @default(now()) @db.Timestamp(0)
  device_permissions device_permissions[]
  signals            signals[]
}

model locations {
  location_id Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  address     String?   @db.Text
  latitude    Decimal?  @db.Decimal(10, 8)
  longitude   Decimal?  @db.Decimal(11, 8)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
}

model signal_logs {
  log_id      BigInt    @id @default(autoincrement())
  signal_id   Int
  value       String?   @db.VarChar(255)
  recorded_at DateTime? @default(now()) @db.Timestamp(0)
  signals     signals   @relation(fields: [signal_id], references: [signal_id], onDelete: Cascade, onUpdate: NoAction, map: "signal_logs_ibfk_1")

  @@index([signal_id], map: "signal_id")
}

model signals {
  signal_id   Int                 @id @default(autoincrement())
  device_id   Int
  signal_type signals_signal_type
  value       String?             @db.VarChar(255)
  unit        String?             @db.VarChar(50)
  recorded_at DateTime?           @default(now()) @db.Timestamp(0)
  signal_logs signal_logs[]
  devices     devices             @relation(fields: [device_id], references: [device_id], onDelete: Cascade, onUpdate: NoAction, map: "signals_ibfk_1")

  @@index([device_id], map: "signals_device_id_idx")
}

model users {
  user_id            Int                  @id @default(autoincrement())
  username           String               @unique(map: "users_username_unique") @db.VarChar(100)
  email              String               @unique(map: "users_email_unique") @db.VarChar(150)
  role               users_role?          @default(viewer)
  created_at         DateTime?            @default(now()) @db.Timestamp(0)
  device_permissions device_permissions[]
}

enum devices_type {
  camera
  sensor
  gateway
  other
}

enum signals_signal_type {
  temperature
  motion
  video
  audio
  other
}

enum users_role {
  admin
  operator
  viewer
}

enum devices_status {
  active
  inactive
  maintenance
}
